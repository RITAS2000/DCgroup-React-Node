{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Recipes app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of recipes app"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://dcgroup-react-node-b.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication and registration"
    },
    {
      "name": "Users",
      "description": "User information"
    },
    {
      "name": "Categories",
      "description": "Recipe categories"
    },
    {
      "name": "Ingredients",
      "description": "Ingredients"
    },
    {
      "name": "Recipes",
      "description": "Recipes"
    }
  ],
  "paths": {
    "/api/recipes": {
      "post": {
        "operationId": "createRecipe",
        "tags": [
          "Recipes"
        ],
        "summary": "Create a new recipe",
        "description": "Private endpoint (JWT). Creates a new user recipe.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RecipeInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "description": "Returns the currently authenticated user (password is omitted by the model).",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current user profile",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/user"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "savedRecipes": {
                          "type": "array",
                          "description": "IDs of recipes saved by the current user",
                          "items": {
                            "type": "string",
                            "example": "66c4b1f2a2e123456789abcd"
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "success": {
                    "value": {
                      "_id": "68a622a7cd40d43441c362f1",
                      "name": "Max",
                      "email": "max@example.com",
                      "savedRecipes": [
                        "66c4b1f2a2e123456789abcd",
                        "66c4b1f2a2e123456789abce"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get categories",
        "description": "Returns a list of recipe categories.",
        "operationId": "getCategories",
        "security": [],
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Category document",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "Category ID (Mongo ObjectId)",
                            "example": "66b8e6b2f1c8a5f2d1a9c777"
                          },
                          "name": {
                            "type": "string",
                            "description": "Unique category name",
                            "example": "Dessert"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "value": {
                      "status": 200,
                      "data": [
                        {
                          "_id": "66b8e6b2f1c8a5f2d1a9c777",
                          "name": "Dessert"
                        },
                        {
                          "_id": "66b8e6b2f1c8a5f2d1a9c778",
                          "name": "Soup"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get ingredients",
        "description": "Returns a list of ingredients.",
        "operationId": "getIngredients",
        "security": [],
        "responses": {
          "200": {
            "description": "List of ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Ingredient document",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "Ingredient ID (Mongo ObjectId)",
                            "example": "66b8e6b2f1c8a5f2d1a9c111"
                          },
                          "name": {
                            "type": "string",
                            "description": "Unique ingredient name",
                            "example": "Sugar"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "value": {
                      "status": 200,
                      "data": [
                        {
                          "_id": "66b8e6b2f1c8a5f2d1a9c111",
                          "name": "Sugar"
                        },
                        {
                          "_id": "66b8e6b2f1c8a5f2d1a9c112",
                          "name": "Salt"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipes by id",
        "operationId": "getRecipe",
        "description": "Get recipe by id",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get recipe by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found recipe with id 65ca67e7ae7f10c88b598384!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/RecipeInput"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/api/recipes/own": {
      "get": {
        "operationId": "getOwnRecipes",
        "tags": [
          "Recipes"
        ],
        "summary": "Get current user's own recipes",
        "description": "Returns recipes owned by the current user (determined by JWT in the Authorization header).\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page number (1..N)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found own recipes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnRecipesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/saved-recipes": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Add saved recipes",
        "operationId": "addSavedRecipes",
        "description": "Add recipe to saved (favorite) recipes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "recipeId"
                ],
                "properties": {
                  "recipeId": {
                    "description": "Recipe id",
                    "type": "string",
                    "example": "6462a6cd4c3d0ddd28897f92"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recipe added to saved recipes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe added to saved recipes"
                    },
                    "data": {
                      "$ref": "#/components/schemas/RecipeInput"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/recipes/saved-recipes/{recipeId}": {
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Delete recipe by id from favorite",
        "operationId": "deleteSavedRecipe",
        "description": "Delete recipe by id from favorite",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recipeId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "register",
        "operationId": "registerUser",
        "description": "Register a user with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "Username",
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "Email",
                    "type": "string",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "description": "Password",
                    "type": "string",
                    "example": "mypassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "operationId": "loginUser",
        "description": "Login user with email and password",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "Email",
                    "type": "string",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "description": "Password",
                    "type": "string",
                    "example": "mypassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "Access token for authentication",
                          "example": "t2I+B1LDl0DcVBzG058yGmWfWjWaG/l4HXUGhNuI"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "operationId": "logout",
        "description": "Logs out a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully user logged out"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "RecipeIngredient": {
        "type": "object",
        "required": [
          "ingredient",
          "ingredientAmount"
        ],
        "properties": {
          "ingredient": {
            "type": "string",
            "description": "Ingredient ID (one of ingredient collection)",
            "example": "66b8e6b2f1c8a5f2d1a9c111"
          },
          "ingredientAmount": {
            "type": "string",
            "minLength": 2,
            "maxLength": 16,
            "example": "100 g"
          }
        }
      },
      "Recipe": {
        "type": "object",
        "required": [
          "name",
          "decr",
          "cookiesTime",
          "category",
          "ingredients",
          "instruction",
          "owner",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "66b8e6b2f1c8a5f2d1a9c222"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "example": "Pasta Carbonara"
          },
          "decr": {
            "type": "string",
            "maxLength": 200,
            "example": "Classic Italian pasta with eggs, cheese and pancetta"
          },
          "cookiesTime": {
            "type": "integer",
            "minimum": 1,
            "maximum": 360,
            "example": 25,
            "description": "time in minutes"
          },
          "cals": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10000,
            "example": 450
          },
          "category": {
            "type": "string",
            "example": "66b8e6b2f1c8a5f2d1a9c777",
            "description": "ID from the category collection"
          },
          "ingredients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecipeIngredient"
            }
          },
          "instruction": {
            "type": "string",
            "maxLength": 1200,
            "example": "Boil pasta, fry pancetta, mix with eggs and cheese..."
          },
          "recipeImg": {
            "type": "string",
            "format": "uri",
            "example": "https://cdn.example.com/images/recipe.jpg"
          },
          "owner": {
            "type": "string",
            "example": "66b8e6b2f1c8a5f2d1a9c999"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-20T12:34:56.000Z"
          }
        }
      },
      "OwnRecipesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found own recipes!"
          },
          "data": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Recipe"
                }
              },
              "page": {
                "type": "integer",
                "example": 1
              },
              "perPage": {
                "type": "integer",
                "example": 12
              },
              "totalItems": {
                "type": "integer",
                "example": 1
              },
              "totalPages": {
                "type": "integer",
                "example": 1
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              },
              "hasNextPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        }
      },
      "RecipeInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 64,
            "example": "Test Soup"
          },
          "description": {
            "type": "string",
            "maxLength": 200,
            "example": "Simple test recipe"
          },
          "time": {
            "type": "integer",
            "minimum": 1,
            "maximum": 360,
            "example": 20
          },
          "calories": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10000,
            "example": 150
          },
          "category": {
            "oneOf": [
              {
                "type": "string",
                "description": "Single category",
                "example": "Soup"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of categories",
                "example": [
                  "Soup",
                  "Vegan"
                ]
              }
            ]
          },
          "ingredients": {
            "oneOf": [
              {
                "type": "array",
                "minItems": 2,
                "maxItems": 16,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Water"
                    },
                    "amount": {
                      "type": "string",
                      "example": "500ml"
                    }
                  },
                  "required": [
                    "name",
                    "amount"
                  ]
                }
              },
              {
                "type": "string",
                "description": "JSON stringified array of ingredients (for multipart/form-data)",
                "example": "[{\"name\":\"Water\",\"amount\":\"500ml\"},{\"name\":\"Salt\",\"amount\":\"1 tsp\"}]"
              }
            ]
          },
          "instructions": {
            "type": "string",
            "maxLength": 1200,
            "example": "Boil water. Add salt."
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "Recipe image file (max 2MB)"
          }
        },
        "required": [
          "title",
          "description",
          "time",
          "category",
          "ingredients",
          "instructions"
        ]
      },
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email"
        ],
        "properties": {
          "_id": {
            "description": "Contact's ID",
            "type": "string",
            "example": "68a622a7cd40d43441c362f1"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "minLength": 3,
            "maxLength": 16,
            "example": "Anastasia"
          },
          "email": {
            "description": "User's email address",
            "type": "string",
            "format": "email",
            "example": "testuser@example.com"
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Recipe created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "message": {
                  "type": "string",
                  "example": "Recipe created successfully"
                },
                "data": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RecipeInput"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "68a5a9568dd790ddd800136c"
                        },
                        "user": {
                          "type": "string",
                          "example": "64f06a1b6f1c2d0012345678"
                        },
                        "photo": {
                          "type": "string",
                          "example": "/uploads/1755691219645_img.jpg"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Id is not valid"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Please provide a valid token"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Recipe not found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Recipe not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    }
  }
}